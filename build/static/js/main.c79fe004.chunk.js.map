{"version":3,"sources":["TranslitTextBox.js","App.js","serviceWorker.js","index.js"],"names":["TranslitTextBox","props","onTextChanged","e","value","target","valueArray","split","suggestions","getSuggestions","length","setState","text","setLanguageCookie","document","cookie","state","lang","fetch","then","res","json","console","log","twords","options","replace","this","result","getElementById","focus","map","item","onClick","suggestionSelected","className","defaultValue","getLanguageCookie","onChange","selected","id","placeholder","onInput","type","renderSuggestions","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAGqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRC,cAAgB,SAAAC,GACd,IAAMC,EAAQD,EAAEE,OAAOD,MACnBE,EAAaF,EAAMG,MAAM,OACzBC,EAAc,GAClB,EAAKC,eAAeH,EAAWA,EAAWI,OAAS,IACnD,EAAKC,UAAS,iBAAO,CAAEH,cAAaI,KAAMR,OAzBzB,EA4BnBS,kBAAoB,SAAAV,GAClBW,SAASC,OAAS,SAAWZ,EAAEE,OAAOD,OA3BtC,EAAKY,MAAQ,CACXR,YAAa,GACbI,KAAM,IAJS,E,4EAQJR,GAAQ,IAAD,OAChBa,EAAOH,SAASC,OACpBG,MAAM,iDAAmDd,EAAQa,GAC9DE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJC,QAAQC,IAAIF,EAAKG,OAAO,GAAGC,SAC3B,EAAKd,SAAS,CACZH,YAAaa,EAAKG,OAAO,GAAGC,e,0CAmBlC,OADWX,SAASC,OAAOW,QAAQ,SAAU,M,yCAI5BtB,GACjBuB,KAAKC,QAAUxB,EAAQ,IACvB,IAAIgB,EAAMO,KAAKC,OAAOF,QAAQ,YAAa,IAO3CC,KAAKhB,UAAS,iBAAO,CACnBC,KAAMQ,EACNZ,YAAa,OAEfM,SAASe,eAAe,WAAWC,U,0CAGhB,IAAD,OACVtB,EAAgBmB,KAAKX,MAArBR,YACR,OAA2B,IAAvBA,EAAYE,OACP,KAGP,4BACGF,EAAYuB,KAAI,SAAAC,GAAI,OACnB,wBAAIC,QAAS,kBAAM,EAAKC,mBAAmBF,KAAQA,S,+BAMjD,IACApB,EAASe,KAAKX,MAAdJ,KACR,OACE,yBAAKuB,UAAU,mBACb,yBAAKA,UAAU,oBAAf,qBAEE,6BACA,6BACA,4BACEC,aAAcT,KAAKU,oBACnBC,SAAUX,KAAKd,mBAEf,4BAAQT,MAAM,GAAGmC,UAAQ,GAAzB,MAGA,4BAAQnC,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,YAEF,6BACA,8BAEF,8BACEoC,GAAG,UACHpC,MAAOQ,EACP6B,YAAY,2BACZC,QAASf,KAAKzB,cACdyC,KAAK,SAENhB,KAAKiB,yB,GAtG+BC,IAAMC,YCepCC,MAdf,WACE,OACE,yBAAKZ,UAAU,OACb,2DAEA,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,UCCUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxC,SAASe,eAAe,SD6H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.c79fe004.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TranslitTextBox.css\";\r\n\r\nexport default class TranslitTextBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      suggestions: [],\r\n      text: \"\"\r\n    };\r\n  }\r\n\r\n  getSuggestions(value) {\r\n    var lang = document.cookie;\r\n    fetch(\"http://146.148.85.67/processWordJSON?inString=\" + value + lang)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        console.log(json.twords[0].options);\r\n        this.setState({\r\n          suggestions: json.twords[0].options\r\n        });\r\n      });\r\n  }\r\n\r\n  onTextChanged = e => {\r\n    const value = e.target.value;\r\n    var valueArray = value.split(/\\s+/);\r\n    let suggestions = [];\r\n    this.getSuggestions(valueArray[valueArray.length - 1]);\r\n    this.setState(() => ({ suggestions, text: value }));\r\n  };\r\n\r\n  setLanguageCookie = e => {\r\n    document.cookie = \"&lang=\" + e.target.value;\r\n  };\r\n\r\n  getLanguageCookie() {\r\n    var lang = document.cookie.replace(\"&lang=\", \"\");\r\n    return lang;\r\n  }\r\n\r\n  suggestionSelected(value) {\r\n    this.result += value + \" \";\r\n    var res = this.result.replace(\"undefined\", \"\");\r\n    // let res;\r\n    // if (document.getElementById(\"textbox\").getAttribute(\"value\") === null) {\r\n    //   res += value;\r\n    // } else {\r\n    //   res += \" \" + value;\r\n    // }\r\n    this.setState(() => ({\r\n      text: res,\r\n      suggestions: []\r\n    }));\r\n    document.getElementById(\"textbox\").focus();\r\n  }\r\n\r\n  renderSuggestions() {\r\n    const { suggestions } = this.state;\r\n    if (suggestions.length === 0) {\r\n      return null;\r\n    }\r\n    return (\r\n      <ul>\r\n        {suggestions.map(item => (\r\n          <li onClick={() => this.suggestionSelected(item)}>{item}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    return (\r\n      <div className=\"TranslitTextBox\">\r\n        <div className=\"LanguageSelector\">\r\n          Select a language!\r\n          <br />\r\n          <br />\r\n          <select\r\n            defaultValue={this.getLanguageCookie()}\r\n            onChange={this.setLanguageCookie}\r\n          >\r\n            <option value=\"\" selected>\r\n              --\r\n            </option>\r\n            <option value=\"tamil\">Tamil</option>\r\n            <option value=\"hindi\">Hindi</option>\r\n            <option value=\"telugu\">Telugu</option>\r\n            <option value=\"bengali\">Bengali</option>\r\n            <option value=\"gujarati\">Gujarati</option>\r\n            <option value=\"kannada\">Kannada</option>\r\n            <option value=\"malayalam\">Malayalam</option>\r\n            <option value=\"punjabi\">Punjabi</option>\r\n          </select>\r\n          <br />\r\n          <hr />\r\n        </div>\r\n        <textarea\r\n          id=\"textbox\"\r\n          value={text}\r\n          placeholder=\"Hey there! Enter a word!\"\r\n          onInput={this.onTextChanged}\r\n          type=\"text\"\r\n        />\r\n        {this.renderSuggestions()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TranslitTextBox from \"./TranslitTextBox\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>WELCOME TO TRANSLIT APP</header>\r\n\r\n      <div className=\"App-Component\">\r\n        <div className=\"App-Component\">\r\n          <TranslitTextBox />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}